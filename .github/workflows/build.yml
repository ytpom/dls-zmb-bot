name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

# Добавляем права для GitHub Actions
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: Check PNG files
      run: |
        Write-Host "Checking for PNG files:"
        $pngFiles = Get-ChildItem -Path "*.png" -ErrorAction SilentlyContinue
        if ($pngFiles) {
          Write-Host "Found $($pngFiles.Count) PNG files:"
          foreach ($file in $pngFiles) {
            Write-Host "  - $($file.Name)"
          }
        } else {
          Write-Host "No PNG files found"
        }
      shell: powershell

    - name: Build executable
      run: |
        Write-Host "Building executable..."
        
        $pngFiles = Get-ChildItem -Path "*.png" -ErrorAction SilentlyContinue
        $addDataArgs = @()
        
        if ($pngFiles) {
          foreach ($file in $pngFiles) {
            $addDataArgs += "--add-data"
            $addDataArgs += "$($file.Name);."
          }
          Write-Host "Including $($pngFiles.Count) PNG files"
        } else {
          Write-Host "Building without PNG files"
        }
        
        $allArgs = @("--onefile", "--console", "--name", "dls-zmb-bot", "--distpath", "dist", "--workpath", "build", "--specpath", ".") + $addDataArgs + @("zmb.py")
        
        & pyinstaller $allArgs
        
        if (Test-Path "dist\dls-zmb-bot.exe") {
          $exeInfo = Get-Item "dist\dls-zmb-bot.exe"
          Write-Host "Build successful!"
          Write-Host "File size: $([math]::Round($exeInfo.Length / 1MB, 2)) MB"
        } else {
          Write-Host "Build failed!"
          exit 1
        }
      shell: powershell

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dls-zmb-bot-${{ github.run_number }}
        path: dist/
        retention-days: 90

    - name: Prepare release
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        mkdir release-assets
        if (Test-Path "dist\dls-zmb-bot.exe") {
          Copy-Item "dist\dls-zmb-bot.exe" "release-assets\dls-zmb-bot.exe"
          Write-Host "Release file ready"
        } else {
          Write-Host "No EXE file found"
          exit 1
        }
      shell: powershell

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## DLS Zombie Bot - Release ${{ github.ref_name }}
          
          ### Download:
          - **Windows**: `dls-zmb-bot.exe`
          
          ### Quick Start:
          1. Download `dls-zmb-bot.exe`
          2. Run the executable
          3. Open Doomsday: Last Survivors in fullscreen mode
          4. The bot will automatically start hunting zombies
          
          ### Controls:
          - **P** - Pause/Resume bot
          - **Ctrl+C** - Stop bot
          
          ### System Requirements:
          - Windows 10/11
          - Screen resolution 1920x1080 (recommended)
          - Game in fullscreen mode
          
          ### Features:
          - Automatic camp search
          - Zombie type selection
          - Adaptive level switching when no targets found
          - Automatic use of boosts
          - Auto-close popups and ads
          
          ---
          *Built automatically with GitHub Actions*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        