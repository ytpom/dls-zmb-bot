name: Build and Release Windows Only

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: Run tests (–µ—Å–ª–∏ –µ—Å—Ç—å)
      run: |
        if (Test-Path "pytest.ini") -or (Test-Path "setup.cfg") -or (Test-Path "tests") {
          pip install pytest
          pytest
        }
      shell: powershell
      continue-on-error: true

    - name: Build executable with PyInstaller
      run: |
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º zmb.py –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
        $MAIN_FILE = "zmb.py"
        
        if (-not (Test-Path $MAIN_FILE)) {
          Write-Host "File zmb.py not found!"
          Write-Host "Current directory contents:"
          Get-ChildItem -Force
          exit 1
        }
        
        Write-Host "Using main file: $MAIN_FILE"
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ PNG —Ñ–∞–π–ª–æ–≤
        $pngFiles = Get-ChildItem -Path "*.png"
        Write-Host "Found PNG files: $($pngFiles.Count)"
        foreach ($file in $pngFiles) {
          Write-Host "  - $($file.Name)"
        }
        
        # –°–æ–∑–¥–∞–µ–º spec —Ñ–∞–π–ª –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        $specContent = @"
# -*- mode: python ; coding: utf-8 -*-

import os

block_cipher = None

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PNG —Ñ–∞–π–ª–æ–≤
png_files = []
for png_file in os.listdir('.'):
    if png_file.endswith('.png'):
        png_files.append((png_file, '.'))

a = Analysis(
    ['zmb.py'],
    pathex=[],
    binaries=[],
    datas=png_files,
    hiddenimports=[
        'pyautogui',
        'keyboard',
        'PIL',
        'PIL.Image',
        'cv2',
        'numpy',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='dls-zmb-bot',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,
    disable_windowed_traceback=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)
"@
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º spec —Ñ–∞–π–ª
        $specContent | Out-File -FilePath "zmb.spec" -Encoding UTF8
        
        Write-Host "Created zmb.spec file"
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª—å–∑—É—è spec —Ñ–∞–π–ª
        Write-Host "Building using spec file..."
        pyinstaller zmb.spec
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–±–æ—Ä–∫–∏
        if (Test-Path "dist\dls-zmb-bot.exe") {
          Write-Host "Build successful! EXE file created."
          $exeInfo = Get-Item "dist\dls-zmb-bot.exe"
          Write-Host "EXE file size: $([math]::Round($exeInfo.Length / 1MB, 2)) MB"
        } else {
          Write-Host "Build failed! EXE file not created."
          Write-Host "Checking for any exe files in dist:"
          if (Test-Path "dist") {
            Get-ChildItem -Path dist\ -Filter "*.exe" -Recurse
          }
          exit 1
        }
      shell: powershell

    - name: List dist directory
      run: |
        Write-Host "Contents of dist directory:"
        if (Test-Path "dist") {
          Get-ChildItem -Path dist\ -Force -Recurse
        } else {
          Write-Host "dist directory does not exist!"
        }
      shell: powershell

    - name: Upload artifacts (for every build)
      uses: actions/upload-artifact@v4
      with:
        name: dls-zmb-bot-build-${{ github.run_number }}
        path: dist/
        retention-days: 90

    # Release only when tag is pushed
    - name: Prepare release (only for tags)
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        New-Item -ItemType Directory -Force -Path release-assets | Out-Null
        
        # –ù–∞–π—Ç–∏ –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å exe —Ñ–∞–π–ª –¥–ª—è —Ä–µ–ª–∏–∑–∞
        $exeFile = Get-ChildItem -Path dist\ -Filter "*.exe" | Select-Object -First 1
        if ($exeFile) {
          Copy-Item $exeFile.FullName "release-assets\dls-zmb-bot.exe"
          Write-Host "Exe file prepared for release: $($exeFile.Name)"
          Write-Host "Final file size: $([math]::Round((Get-Item $exeFile.FullName).Length / 1MB, 2)) MB"
        } else {
          Write-Host "EXE file not found in dist!"
          Write-Host "Contents of dist folder:"
          Get-ChildItem -Path dist\ -Force -Recurse
          exit 1
        }
        
        Write-Host "Contents of release-assets:"
        Get-ChildItem -Path release-assets\ -Force
      shell: powershell

    - name: Create Release (only for tags)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑ dls-zmb-bot –¥–ª—è Windows
          
          ### üì• –°–∫–∞—á–∞—Ç—å:
          - **Windows**: `dls-zmb-bot.exe`
          
          ### üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫:
          
          1. –°–∫–∞—á–∞–π—Ç–µ `dls-zmb-bot.exe`
          2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
          3. –û—Ç–∫—Ä–æ–π—Ç–µ –∏–≥—Ä—É –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
          4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à—É **P** –¥–ª—è –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          
          ### ‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
          - Windows 10/11
          - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ 1920x1080 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
          - –ò–≥—Ä–∞ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
          
          ### üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
          - **P** - –ü–∞—É–∑–∞/–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          - **Ctrl+C** - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
          
          ---
          *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±—Ä–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é GitHub Actions*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
