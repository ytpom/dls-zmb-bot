name: Build and Release Windows Simple

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: Run tests (–µ—Å–ª–∏ –µ—Å—Ç—å)
      run: |
        if (Test-Path "pytest.ini") -or (Test-Path "setup.cfg") -or (Test-Path "tests") {
          pip install pytest
          pytest
        }
      shell: powershell
      continue-on-error: true

    - name: List PNG files
      run: |
        Write-Host "Checking for PNG files:"
        $pngFiles = Get-ChildItem -Path "*.png"
        Write-Host "Found PNG files: $($pngFiles.Count)"
        foreach ($file in $pngFiles) {
          Write-Host "  - $($file.Name) ($([math]::Round($file.Length / 1KB, 1)) KB)"
        }
      shell: powershell

    - name: Build executable with PyInstaller
      run: |
        Write-Host "Building executable..."
        
        # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ PyInstaller —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ PNG —Ñ–∞–π–ª–∞
        $pngFiles = Get-ChildItem -Path "*.png"
        $addDataArgs = @()
        
        foreach ($file in $pngFiles) {
          $addDataArgs += "--add-data"
          $addDataArgs += "$($file.Name);."
        }
        
        if ($addDataArgs.Count -gt 0) {
          Write-Host "Including $($pngFiles.Count) PNG files in the executable"
          & pyinstaller --onefile --console --name "dls-zmb-bot" --distpath "dist" --workpath "build" --specpath "." $addDataArgs "zmb.py"
        } else {
          Write-Host "No PNG files found, building without images"
          & pyinstaller --onefile --console --name "dls-zmb-bot" --distpath "dist" --workpath "build" --specpath "." "zmb.py"
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (Test-Path "dist\dls-zmb-bot.exe") {
          $exeInfo = Get-Item "dist\dls-zmb-bot.exe"
          Write-Host "‚úÖ Build successful!"
          Write-Host "üì¶ EXE file size: $([math]::Round($exeInfo.Length / 1MB, 2)) MB"
          Write-Host "üìÅ Location: $($exeInfo.FullName)"
        } else {
          Write-Host "‚ùå Build failed! No EXE file found."
          if (Test-Path "dist") {
            Write-Host "Contents of dist folder:"
            Get-ChildItem -Path "dist" -Recurse
          }
          exit 1
        }
      shell: powershell

    - name: Test executable (quick check)
      run: |
        Write-Host "Testing executable..."
        if (Test-Path "dist\dls-zmb-bot.exe") {
          # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–µ –ø–∞–¥–∞–µ—Ç —Å—Ä–∞–∑—É
          $process = Start-Process -FilePath "dist\dls-zmb-bot.exe" -PassThru -NoNewWindow
          Start-Sleep -Seconds 2
          if (-not $process.HasExited) {
            Write-Host "‚úÖ Executable starts correctly"
            Stop-Process -Id $process.Id -Force
          } else {
            Write-Host "‚ö†Ô∏è Executable exited immediately (exit code: $($process.ExitCode))"
          }
        }
      shell: powershell
      continue-on-error: true

    - name: Upload artifacts (for every build)
      uses: actions/upload-artifact@v4
      with:
        name: dls-zmb-bot-build-${{ github.run_number }}
        path: dist/
        retention-days: 90

    # Release only when tag is pushed
    - name: Prepare release (only for tags)
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        New-Item -ItemType Directory -Force -Path release-assets | Out-Null
        
        if (Test-Path "dist\dls-zmb-bot.exe") {
          Copy-Item "dist\dls-zmb-bot.exe" "release-assets\dls-zmb-bot.exe"
          $exeInfo = Get-Item "release-assets\dls-zmb-bot.exe"
          Write-Host "‚úÖ Release file prepared: dls-zmb-bot.exe"
          Write-Host "üì¶ Size: $([math]::Round($exeInfo.Length / 1MB, 2)) MB"
        } else {
          Write-Host "‚ùå No EXE file to prepare for release!"
          exit 1
        }
      shell: powershell

    - name: Create Release (only for tags)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## üßü‚Äç‚ôÇÔ∏è DLS Zombie Bot - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑
          
          ### üì• –°–∫–∞—á–∞—Ç—å:
          - **Windows**: `dls-zmb-bot.exe`
          
          ### üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:
          1. –°–∫–∞—á–∞–π—Ç–µ `dls-zmb-bot.exe`
          2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º
          3. –û—Ç–∫—Ä–æ–π—Ç–µ –∏–≥—Ä—É Doomsday: Last Survivors –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
          4. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç –ø–æ–∏—Å–∫ –∏ –∞—Ç–∞–∫—É –∑–æ–º–±–∏
          
          ### üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
          - **P** - –ü–∞—É–∑–∞/–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
          - **Ctrl+C** - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
          
          ### ‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
          - Windows 10/11
          - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ 1920x1080 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
          - –ò–≥—Ä–∞ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
          
          ### üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
          - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ª–∞–≥–µ—Ä–µ–π
          - –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–æ–º–±–∏ –¥–ª—è –∞—Ç–∞–∫–∏
          - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ü–µ–ª–µ–π
          - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å–∏–ª–µ–Ω–∏–π
          - –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω –∏ —Ä–µ–∫–ª–∞–º—ã
          
          ---
          *ü§ñ –°–æ–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é GitHub Actions*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
