import pyautogui
import time
import keyboard
import traceback
import sys
import os

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å–∞–º
def resource_path(relative_path):
    """ –ü–æ–ª—É—á–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É, —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤ dev, —Ç–∞–∫ –∏ –≤ PyInstaller """
    try:
        # PyInstaller —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Ç—å –≤ _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    
    return os.path.join(base_path, relative_path)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
search = resource_path('search.png')
go = resource_path('go.png')
hands = resource_path('hands.png')
camp = resource_path('camp.png')
zmb = resource_path('zmb.png')
attack = resource_path('attack.png')
force = resource_path('force.png')
forces = resource_path('forces.png')
use_50 = resource_path('use_50.png')
use_500 = resource_path('use_500.png')
use_100 = resource_path('use_100.png')
close = resource_path('close.png')
close2 = resource_path('close2.png')
close_adv = resource_path('close_adv.png')
no_found = resource_path('no_found.png')
lvl_down = resource_path('lvl_down.png')
x = resource_path('x.png')
lvl_up = resource_path('lvl_up.png')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
required_images = [
    search, go, hands, camp, zmb, attack, force, forces, 
    use_50, use_500, use_100, close, close2, close_adv, 
    no_found, lvl_down, x, lvl_up
]

print("=== DLS Zombie Bot ===")
print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

missing_files = []
for img_path in required_images:
    if not os.path.exists(img_path):
        missing_files.append(os.path.basename(img_path))
    else:
        print(f"‚úì {os.path.basename(img_path)} –Ω–∞–π–¥–µ–Ω")

if missing_files:
    print(f"\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ PNG —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞.")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    sys.exit(1)

print("‚úì –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã!")
print("\n=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ===")
print("P - –ü–∞—É–∑–∞/–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
print("Ctrl+C - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
print("\n–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
time.sleep(3)

lvl_down_counter = 0
max_lvl_down_attempts = 5

paused = False

free_camp = False
select_zmb = False
click_search = False
click_zmb = False
click_attack = False
select_force = False
click_go = False
click_use = False
click_x = False

desc = ""

def toggle_pause():
    global paused
    paused = not paused
    if paused:
        print("‚è∏Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –ø–∞—É–∑–µ. –ù–∞–∂–º–∏—Ç–µ 'P' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
    else:
        print("‚ñ∂Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ 'P' –¥–ª—è –ø–∞—É–∑—ã.")

keyboard.add_hotkey('p', toggle_pause)

def locate_and_click(image_path, confidence=0.99, delay=0.5, move_offset=None, desc="Description"):
    print(f"üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {os.path.basename(image_path)}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(image_path):
        print(f"‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª {os.path.basename(image_path)} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {image_path}")
        return False
    
    try:
        x, y = pyautogui.locateCenterOnScreen(image_path, confidence=confidence, grayscale=False)
        if move_offset:
            x += move_offset[0]
            y += move_offset[1]
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {os.path.basename(image_path)} –Ω–∞–π–¥–µ–Ω–æ. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x}, {y})")
        pyautogui.moveTo(x, y, duration=0.1)
        pyautogui.mouseDown()
        pyautogui.mouseUp()
        print(f"üñ±Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω –∫–ª–∏–∫ –ø–æ {desc}")
        time.sleep(delay)
        return True
    except pyautogui.ImageNotFoundException:
        print(f"‚ùì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {os.path.basename(image_path)} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ {os.path.basename(image_path)}:")
        print(f"   {str(e)}")
        traceback.print_exc()
        time.sleep(2)
    return False

print("\nüöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ 'P' –¥–ª—è –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")

try:
    while True:
        if paused:
            time.sleep(1)
            continue
        
        locate_and_click(hands, desc="—Ä—É—á–∫–∞–º")

        # if not free_camp:
        if locate_and_click(camp, move_offset=(-1200, 230), desc="–ø–æ–∏—Å–∫—É"):
            free_camp = True

        # if not select_zmb and free_camp:
        if locate_and_click(zmb, desc="—Ç–∏–ø—É –∑–æ–º–±–∏"):
            select_zmb = True

        # # if not click_search and select_zmb:
        # if locate_and_click(search, delay=2, desc="–∫–Ω–æ–ø–∫–µ –ü–æ–∏—Å–∫"):
        #     click_search = True

        if locate_and_click(search, delay=2, desc="–∫–Ω–æ–ø–∫–µ –ü–æ–∏—Å–∫"):
            try:
                if pyautogui.locateCenterOnScreen(no_found, confidence=0.9):
                    print("üö´ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—ã—Ç–∞–µ–º—Å—è —Å–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–æ–º–±–∏...")

                    if lvl_down_counter < max_lvl_down_attempts:
                        if locate_and_click(camp, move_offset=(-1200, 230), desc="–ø–æ–∏—Å–∫—É"):
                            if locate_and_click(zmb, desc="—Ç–∏–ø—É –∑–æ–º–±–∏"):
                                time.sleep(1)
                                if locate_and_click(lvl_down, desc="–ø–æ–Ω–∏–∂–µ–Ω–∏—é —É—Ä–æ–≤–Ω—è –∑–æ–º–±–∏"):
                                    lvl_down_counter += 1
                                    time.sleep(1)
                                    locate_and_click(search, delay=1, desc="–ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–µ –ü–æ–∏—Å–∫")
                                else:
                                    print("‚ö†Ô∏è lvl_down –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
                            else:
                                print("‚ö†Ô∏è zmb –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
                        else:
                            print("‚ö†Ô∏è –ª—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    else:
                        print(f"‚¨ÜÔ∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–Ω–∏–∂–µ–Ω–∏–π ({lvl_down_counter}). –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ —Å—Ç–æ–ª—å–∫–æ –∂–µ.")
                        if locate_and_click(camp, move_offset=(-1200, 230), desc="–ø–æ–∏—Å–∫—É"):
                            if locate_and_click(zmb, desc="—Ç–∏–ø—É –∑–æ–º–±–∏"):
                                time.sleep(1)

                                success_count = 0
                                for _ in range(lvl_down_counter):
                                    if locate_and_click(lvl_up, desc=f"–ø–æ–≤—ã—à–µ–Ω–∏—é —É—Ä–æ–≤–Ω—è –∑–æ–º–±–∏ ({success_count+1}/{lvl_down_counter})"):
                                        success_count += 1
                                        time.sleep(0.5)
                                    else:
                                        print("‚ö†Ô∏è lvl_up –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                                        break

                                if success_count == lvl_down_counter:
                                    print("‚úÖ –£—Ä–æ–≤–µ–Ω—å –∑–æ–º–±–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω.")
                                else:
                                    print(f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω —Ç–æ–ª—å–∫–æ {success_count} —Ä–∞–∑(–∞).")

                                lvl_down_counter = 0
                else:
                    click_search = True
            except pyautogui.ImageNotFoundException:
                print(f"‚ùì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {os.path.basename(no_found)} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                click_search = True
            except Exception:
                print("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:")
                traceback.print_exc()
                time.sleep(2)

        # if not click_zmb and click_search:
        if click_search:        
            if locate_and_click(camp, move_offset=(-590, 150), desc="–∑–æ–º–±–∏"):
                click_zmb = True

        # if not click_attack and click_zmb:
        if locate_and_click(attack, desc="–∫–Ω–æ–ø–∫–µ –ê—Ç–∞–∫–æ–≤–∞—Ç—å"):
            click_attack = True

        # if not select_force and click_attack:
        if locate_and_click(forces, confidence=0.9, desc="–∏–∫–æ–Ω–∫–µ –æ—Ç—Ä—è–¥–∞ –≤ –ª–∞–≥–µ—Ä–µ"):
            select_force = True

        # if select_force:
        if locate_and_click(go, desc="–∫–Ω–æ–ø–∫–µ –ú–∞—Ä—à"): 
            free_camp = False
            select_zmb = False
            click_search = False
            click_zmb = False
            click_attack = False
            select_force = False
            click_go = True

        # if click_go:
        if locate_and_click(use_100, confidence=0.999, delay=1, desc="–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–Ω–∫—É"):
            click_use = True

        if click_use:
            if locate_and_click(x, confidence=0.999, delay=1, desc="–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –±–∞–Ω–∫–∏"):
                click_x = True

        if click_x:
            if locate_and_click(close, desc="–∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç—å"):
                click_use = False
                click_x = False
                select_force = True

        locate_and_click(close2, desc="–∑–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏—è")
        locate_and_click(close_adv, desc="–∑–∞–∫—Ä—ã—Ç—å —Ä–µ–∫–ª–∞–º—É")

        # click_go = False

        print("üîÑ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –∂–¥—ë–º 3 —Å–µ–∫—É–Ω–¥—ã")
        time.sleep(3)

except KeyboardInterrupt:
    print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
except Exception as e:
    print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    traceback.print_exc()
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
finally:
    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
